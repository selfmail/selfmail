// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  username  String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password  String

  addresses   Address[]
  teams       Team[]       @relation("UserTeams")
  teamMembers TeamMember[]
  emails      Email[]
  ownedTeams  Team[]       @relation("TeamOwner")

  @@map("user")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Address {
  id        String @id @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  userId    String
  addressId String
  email     String
}

enum TeamType {
  personal
  business
}

model Team {
  id          String       @id @unique
  ownerId     String
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  teamType    TeamType
  members     User[]       @relation("UserTeams")
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamMembers TeamMember[]
  teamRoles   TeamRoles[]
  addresses   Address[]
  contacts    Contact[]
}

model TeamMember {
  id      String      @id @unique
  user    User        @relation(fields: [userId], references: [id])
  userId  String
  team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId  String
  role    Role
  roles   TeamRoles[]
  Contact Contact[]

  @@unique([userId, teamId])
}

enum Role {
  OWNER
  MEMBER
}

model TeamRoles {
  id          String       @id @unique
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  role        String
  teamMembers TeamMember[]

  @@unique([teamId, role])
}

model Email {
  id         String    @id @unique
  email      String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime  @default(now())
  summarized String?
  deleted    Boolean   @default(false)
  deletedAt  DateTime?

  @@map("email")
}

model Contact {
  id           String     @id @unique
  email        String
  name         String
  phone        String?
  picture      String?
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
  addedBy      TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String

  @@map("contact")
}

model Waitlist {
  id       String   @id @unique
  email    String   @unique
  // date when the user got into the waitlist
  signedUp DateTime @default(now())
}
