// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  handle        String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  addresses     Address[]
  mainAddress   Address?   @relation("MainAddress")
  sessions      Session[]
  accounts      Account[]
  teams         Team[]     @relation("UserTeams")
  teamMembers   TeamMember[]
  emails        Email[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Address {
  id        String   @id @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  userId    String
  addressId String
  email     String
}

model Team {
  id          String       @id @unique
  owner       User         @relation("Owner", fields: [ownerId], references: [id])
  ownerId     String
  members     User[]       @relation("UserTeams")
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamMembers TeamMember[]
  teamRoles   TeamRoles[]
  addresses   Address[]
  contacts     Contact[]
}

model TeamMember {
  id     String      @id @unique
  user   User        @relation(fields: [userId], references: [id])
  userId String
  team   Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   Role
  roles  TeamRoles[]

  @@unique([userId, teamId])
}

enum Role {
  OWNER
  MEMBER
}

model TeamRoles {
  id          String       @id @unique
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  role        String
  teamMembers TeamMember[]

  @@unique([teamId, role])
}

model Email {
  id         String   @id @unique
  email      String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
  summarized String?
  deleted     Boolean  @default(false)
  deletedAt   DateTime?

  @@map("email")
}

model Contact {
  id      String   @id @unique
  email   String
  name    String
  phone   String?
  picture String?
  team    Team     @relation(fields: [teamId], references: [id])
  teamId  String

  @@map("contact")
}
