// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  sessions         Session[]
  username         String            @unique // works like a handle (e.g: @john, @jane, @john.doe, etc)
  password         String
  bio              String?
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  role             Roles             @default(user) // standart role is the user. The first sign-in will be the admin
  api_key          Key?
  contacts         Contact[]
  helpPosts        HelpPost[]
  deletedHelpPosts DeletedHelpPost[]
  adresse          Adresse[]
  mod              Mod?
  comments         Comment[]
  emails           Email[]
}

model Adresse {
  id            String         @id @unique @default(cuid())
  email         String         @unique
  type          AdresseType
  emails        Email[]
  emailSend     EmailSend[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  deletedEmails DeletedEmail[]
}

enum AdresseType {
  main
  second
  spam
}

enum Roles {
  mod
  admin
  user
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

// The emails, which the user send
model EmailSend {
  id        String   @id @unique @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String
  adresse   Adresse  @relation(fields: [adresseId], references: [id])
  adresseId String
}

model DeletedEmail {
  id        String  @id @unique @default(cuid())
  adresse   Adresse @relation(fields: [adresseId], references: [id])
  adresseId String
}

model Label {
  id          String   @id @unique @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Email {
  id         String   @id @unique @default(cuid())
  content    String
  sender     String
  subject    String
  recipient  String
  createdAt  DateTime @default(now())
  adresse    Adresse  @relation(references: [id], fields: [adresseId], onDelete: Cascade)
  adresseId  String
  contact    Contact? @relation(fields: [contactId], references: [id])
  contactId  String
  summarzied String?
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

// TODO: add references to the emails which are made by this contact, and the user received
model Contact {
  id          String      @id @unique @default(cuid())
  name        String
  email       String // the mail adresse for this user
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  description String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  // emails which this contact sends
  emails      Email[]
  // emails which the user has sent to this
  emailSend   EmailSend[]

  @@unique([email, userId])
}

// the help page
model HelpPost {
  id            String    @id @unique @default(cuid())
  title         String
  content       String
  description   String
  image         String?
  createdAt     DateTime  @default(now())
  author        User      @relation(fields: [userId], references: [id])
  userId        String
  comments      Comment[]
  allowComments Boolean   @default(false)
}

model DeletedHelpPost {
  id          String   @id @unique @default(cuid())
  title       String
  content     String
  description String
  image       String?
  deletedAt   DateTime @default(now())
  author      User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime
  mod         Mod      @relation(fields: [modId], references: [id])
  modId       String
}

model Mod {
  id     String            @id @unique @default(cuid())
  user   User              @relation(fields: [userId], references: [id])
  userId String            @unique
  mod    DeletedHelpPost[]
  modId  String            @unique
}

model Comment {
  id      String   @id @unique @default(cuid())
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  post    HelpPost @relation(fields: [postId], references: [id])
  postId  String
}

// An api key. Every user can only have 1 api key.
model Key {
  id        String   @id @unique @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  token     String   @unique @default(cuid())
  createdAt DateTime @default(now())
  service   Boolean  @default(false) // if this api key is for the service
}

// waitlist for the homepage
model Waitlist {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
