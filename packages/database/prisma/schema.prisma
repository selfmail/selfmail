// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// a single user
model User {
  id       String @id @unique
  name     String
  handle   String // handle like @henri, or @johndoe
  password String

  // account information
  createdAt DateTime     @default(now())
  addresses Address[]
  members   TeamMember[]
  ownTeams  Team[]       @relation("owner")
  teams     Team[]       @relation("members")
  emails    Email[]
}

model Address {
  id        String @id @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  userId    String
  addressId String
  email     String
}

// personal accounts are also counting as teams
model Team {
  id          String       @id @unique
  owner       User         @relation("owner", fields: [ownerId], references: [id])
  ownerId     String
  members     User[]       @relation("members")
  name        String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  teamMembers TeamMember[]
  teamRoles   TeamRoles[]
  addresses   Address[]
  Contact     Contact[]
}

model TeamMember {
  id     String      @id @unique
  user   User        @relation(fields: [userId], references: [id])
  userId String
  team   Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   Role
  roles  TeamRoles[]
}

// there are two types of roles, one if this is the owner or a normal member and as the owner, you can create own roles with different rights
enum Role {
  OWNER
  MEMBER
}

// team role, which can be used to give a user a role in a team
model TeamRoles {
  id          String       @id @unique
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String
  role        String
  teamMembers TeamMember[]
}

// email
model Email {
  id    String @id @unique
  email String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  summarized String?

  deleted   Boolean  @default(false)
  deletedAt DateTime
}

model Contact {
  id      String  @id @unique
  email   String
  name    String
  phone   String?
  picture String?
  // the team, where he is the contact
  team    Team    @relation(fields: [teamId], references: [id])
  teamId  String
}
